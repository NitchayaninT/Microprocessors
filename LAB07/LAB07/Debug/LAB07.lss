
LAB07.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000160  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  000001d4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006ed  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000064b  00000000  00000000  00000969  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000288  00000000  00000000  00000fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000008c  00000000  00000000  0000123c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000360  00000000  00000000  000012c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ac  00000000  00000000  00001628  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000016d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 88 00 	jmp	0x110	; 0x110 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  88:	0c 94 ae 00 	jmp	0x15c	; 0x15c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <timer>:


volatile uint8_t led = 0; // 0: LED OFF, 1: LED ON

void timer() {                        
	TCCR1A = 0;                               
  90:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
	TCCR1B = (1 << CS12) | (1 << CS10) | (1 << WGM12);
  94:	8d e0       	ldi	r24, 0x0D	; 13
  96:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	OCR1A = 46874;               
  9a:	8a e1       	ldi	r24, 0x1A	; 26
  9c:	97 eb       	ldi	r25, 0xB7	; 183
  9e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
  a2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
  a6:	08 95       	ret

000000a8 <main>:
}

int main(void) {
	DDRD &= ~(1 << DDD3);                     
  a8:	53 98       	cbi	0x0a, 3	; 10
	DDRD |= (1 << DDD6);   
  aa:	56 9a       	sbi	0x0a, 6	; 10
	EIMSK |= (1 << INT1);                   
  ac:	e9 9a       	sbi	0x1d, 1	; 29
	EICRA |= (1 << ISC10) | (1 << ISC11); //detect rising edge. Initial LED turn off
  ae:	e9 e6       	ldi	r30, 0x69	; 105
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	8c 60       	ori	r24, 0x0C	; 12
  b6:	80 83       	st	Z, r24
	
	timer();//set timer 3 sec       
  b8:	0e 94 48 00 	call	0x90	; 0x90 <timer>
	sei();                                   
  bc:	78 94       	sei
  be:	ff cf       	rjmp	.-2      	; 0xbe <main+0x16>

000000c0 <__vector_2>:
		// do nothing
	}
}

//detect interrupt
ISR(INT1_vect) { //start counting when theres interrupt
  c0:	1f 92       	push	r1
  c2:	0f 92       	push	r0
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	0f 92       	push	r0
  c8:	11 24       	eor	r1, r1
  ca:	8f 93       	push	r24
  cc:	ef 93       	push	r30
  ce:	ff 93       	push	r31
	if(led == 0)
  d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  d4:	81 11       	cpse	r24, r1
  d6:	06 c0       	rjmp	.+12     	; 0xe4 <__vector_2+0x24>
	{
		EICRA |= (1 << ISC10) | (1 << ISC11);
  d8:	e9 e6       	ldi	r30, 0x69	; 105
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	80 81       	ld	r24, Z
  de:	8c 60       	ori	r24, 0x0C	; 12
  e0:	80 83       	st	Z, r24
  e2:	05 c0       	rjmp	.+10     	; 0xee <__vector_2+0x2e>
	}
	else
	{
		EICRA |= (1 << ISC11);
  e4:	e9 e6       	ldi	r30, 0x69	; 105
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	88 60       	ori	r24, 0x08	; 8
  ec:	80 83       	st	Z, r24
	}
	TCNT1 = 0;
  ee:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
  f2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	TIMSK1 |= (1<<OCIE1A); //turn on timer interrupt 
  f6:	ef e6       	ldi	r30, 0x6F	; 111
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	82 60       	ori	r24, 0x02	; 2
  fe:	80 83       	st	Z, r24
}
 100:	ff 91       	pop	r31
 102:	ef 91       	pop	r30
 104:	8f 91       	pop	r24
 106:	0f 90       	pop	r0
 108:	0f be       	out	0x3f, r0	; 63
 10a:	0f 90       	pop	r0
 10c:	1f 90       	pop	r1
 10e:	18 95       	reti

00000110 <__vector_11>:

ISR(TIMER1_COMPA_vect) { //once interrupt happens, what should we do?  
 110:	1f 92       	push	r1
 112:	0f 92       	push	r0
 114:	0f b6       	in	r0, 0x3f	; 63
 116:	0f 92       	push	r0
 118:	11 24       	eor	r1, r1
 11a:	8f 93       	push	r24
 11c:	ef 93       	push	r30
 11e:	ff 93       	push	r31
	//wait for 3 seconds then turn on/off the LED  
	if (led == 0) //led still off -> detect rising edge
 120:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 124:	81 11       	cpse	r24, r1
 126:	05 c0       	rjmp	.+10     	; 0x132 <__vector_11+0x22>
	{
		PORTD |= (1 << PORTD6); 
 128:	5e 9a       	sbi	0x0b, 6	; 11
		led = 1;
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 130:	08 c0       	rjmp	.+16     	; 0x142 <__vector_11+0x32>
	} 
	else //led ON -> detect falling edge
	{
		EICRA |= (1 << ISC11);
 132:	e9 e6       	ldi	r30, 0x69	; 105
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	88 60       	ori	r24, 0x08	; 8
 13a:	80 83       	st	Z, r24
		PORTD &= ~(1 << PORTD6); 
 13c:	5e 98       	cbi	0x0b, 6	; 11
		led = 0;
 13e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	}
	TIMSK1 &= ~(1<<OCIE1A); //write 1 to clear timer interrupt flag
 142:	ef e6       	ldi	r30, 0x6F	; 111
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	8d 7f       	andi	r24, 0xFD	; 253
 14a:	80 83       	st	Z, r24
}
 14c:	ff 91       	pop	r31
 14e:	ef 91       	pop	r30
 150:	8f 91       	pop	r24
 152:	0f 90       	pop	r0
 154:	0f be       	out	0x3f, r0	; 63
 156:	0f 90       	pop	r0
 158:	1f 90       	pop	r1
 15a:	18 95       	reti

0000015c <_exit>:
 15c:	f8 94       	cli

0000015e <__stop_program>:
 15e:	ff cf       	rjmp	.-2      	; 0x15e <__stop_program>
