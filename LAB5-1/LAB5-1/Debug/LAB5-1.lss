
LAB5-1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000018e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000018e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000843  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f9  00000000  00000000  00000a73  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002de  00000000  00000000  0000116c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  0000144c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000040c  00000000  00000000  000014b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001e2  00000000  00000000  000018bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001a9e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 57 00 	call	0xae	; 0xae <main>
  78:	0c 94 9b 00 	jmp	0x136	; 0x136 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z13set_directionv>:
#define F_CPU 20000000
#include <avr/io.h>
#include <util/delay.h>

void set_direction(){
  80:	0f 93       	push	r16
  82:	1f 93       	push	r17
	"ldi r17, 0x00 \n\t"
	"out %1, r17 \n\t"
	:
	: "I" (_SFR_IO_ADDR(DDRB)), "I" (_SFR_IO_ADDR(DDRD))
	: "r16", "r17"
	);
  84:	0f ef       	ldi	r16, 0xFF	; 255
  86:	04 b9       	out	0x04, r16	; 4
  88:	10 e0       	ldi	r17, 0x00	; 0
  8a:	1a b9       	out	0x0a, r17	; 10
}
  8c:	1f 91       	pop	r17
  8e:	0f 91       	pop	r16
  90:	08 95       	ret

00000092 <_Z8togglingh>:
void toggling(uint8_t count){
  92:	0f 93       	push	r16
	"out %[port], r16\n\t"
	:
	: [port] "I" (_SFR_IO_ADDR(PORTB)),
	[mask] "r" (mask)
	: "r16"
	);
  94:	21 e0       	ldi	r18, 0x01	; 1
  96:	30 e0       	ldi	r19, 0x00	; 0
  98:	a9 01       	movw	r20, r18
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <_Z8togglingh+0xe>
  9c:	44 0f       	add	r20, r20
  9e:	55 1f       	adc	r21, r21
  a0:	8a 95       	dec	r24
  a2:	e2 f7       	brpl	.-8      	; 0x9c <_Z8togglingh+0xa>
  a4:	05 b1       	in	r16, 0x05	; 5
  a6:	04 27       	eor	r16, r20
  a8:	05 b9       	out	0x05, r16	; 5
}
  aa:	0f 91       	pop	r16
  ac:	08 95       	ret

000000ae <main>:


int main() {
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
	set_direction();   
  b2:	0e 94 40 00 	call	0x80	; 0x80 <_Z13set_directionv>
	int count = 0;
	int toggle = 0;

	if (PIND == 0x01) {  // 0 1 state
  b6:	89 b1       	in	r24, 0x09	; 9
  b8:	81 30       	cpi	r24, 0x01	; 1
  ba:	c1 f5       	brne	.+112    	; 0x12c <main+0x7e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	8f e4       	ldi	r24, 0x4F	; 79
  be:	93 ec       	ldi	r25, 0xC3	; 195
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <main+0x12>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x18>
  c6:	00 00       	nop
		_delay_ms(10);         // Debounce
		if (PIND == 0x01) {
  c8:	99 b1       	in	r25, 0x09	; 9
			toggle = !toggle;
		}
		while (PIND == 0x01); // Wait for release
  ca:	89 b1       	in	r24, 0x09	; 9
  cc:	81 30       	cpi	r24, 0x01	; 1
  ce:	e9 f3       	breq	.-6      	; 0xca <main+0x1c>
		
		if (toggle) {
  d0:	91 30       	cpi	r25, 0x01	; 1
  d2:	39 f0       	breq	.+14     	; 0xe2 <main+0x34>
  d4:	25 c0       	rjmp	.+74     	; 0x120 <main+0x72>
			while(1){
				// Run LED animation
				if(count == 8) count = 0;
  d6:	c8 30       	cpi	r28, 0x08	; 8
  d8:	d1 05       	cpc	r29, r1
  da:	29 f4       	brne	.+10     	; 0xe6 <main+0x38>
  dc:	c0 e0       	ldi	r28, 0x00	; 0
  de:	d0 e0       	ldi	r29, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <main+0x38>
  e2:	c0 e0       	ldi	r28, 0x00	; 0
  e4:	d0 e0       	ldi	r29, 0x00	; 0
				toggling(count);
  e6:	8c 2f       	mov	r24, r28
  e8:	0e 94 49 00 	call	0x92	; 0x92 <_Z8togglingh>
  ec:	9f e7       	ldi	r25, 0x7F	; 127
  ee:	2a e1       	ldi	r18, 0x1A	; 26
  f0:	86 e0       	ldi	r24, 0x06	; 6
  f2:	91 50       	subi	r25, 0x01	; 1
  f4:	20 40       	sbci	r18, 0x00	; 0
  f6:	80 40       	sbci	r24, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0x44>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x4e>
  fc:	00 00       	nop
				_delay_ms(100);
				toggling(count); //OFF
  fe:	8c 2f       	mov	r24, r28
 100:	0e 94 49 00 	call	0x92	; 0x92 <_Z8togglingh>
 104:	9f ef       	ldi	r25, 0xFF	; 255
 106:	29 e6       	ldi	r18, 0x69	; 105
 108:	88 e1       	ldi	r24, 0x18	; 24
 10a:	91 50       	subi	r25, 0x01	; 1
 10c:	20 40       	sbci	r18, 0x00	; 0
 10e:	80 40       	sbci	r24, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <main+0x5c>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x66>
 114:	00 00       	nop
				_delay_ms(400);
				count++;
 116:	21 96       	adiw	r28, 0x01	; 1
				if(PIND == 0x01)
 118:	89 b1       	in	r24, 0x09	; 9
 11a:	81 30       	cpi	r24, 0x01	; 1
 11c:	e1 f6       	brne	.-72     	; 0xd6 <main+0x28>
 11e:	06 c0       	rjmp	.+12     	; 0x12c <main+0x7e>
			}
			} else {
			while(1)
			{
				// Freeze LEDs
				toggling(count);
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	0e 94 49 00 	call	0x92	; 0x92 <_Z8togglingh>
				if(PIND == 0x01)
 126:	89 b1       	in	r24, 0x09	; 9
 128:	81 30       	cpi	r24, 0x01	; 1
 12a:	d1 f7       	brne	.-12     	; 0x120 <main+0x72>
			}
			
		}
	}
	
}
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	df 91       	pop	r29
 132:	cf 91       	pop	r28
 134:	08 95       	ret

00000136 <_exit>:
 136:	f8 94       	cli

00000138 <__stop_program>:
 138:	ff cf       	rjmp	.-2      	; 0x138 <__stop_program>
