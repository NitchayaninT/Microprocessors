
LAB8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  0000022a  0000029e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000022a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002d6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000308  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c3c  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000781  00000000  00000000  00000fec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000448  00000000  00000000  0000176d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d4  00000000  00000000  00001bb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000418  00000000  00000000  00001c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003c9  00000000  00000000  000020a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  0000246d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e2       	ldi	r30, 0x2A	; 42
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 33       	cpi	r26, 0x38	; 56
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 d6 00 	call	0x1ac	; 0x1ac <main>
  8e:	0c 94 13 01 	jmp	0x226	; 0x226 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <lcd_putValue>:
#define   	LCD_CPIN  PINB         	//LCD COMMANDS PIN
#define   	LCD_RS  0              	//LCD RS
#define   	LCD_EN  1              	//LCD EN
 
void lcd_putValue(unsigned char val){
   	LCD_DPRT &= 0xFF;
  96:	9b b1       	in	r25, 0x0b	; 11
  98:	9b b9       	out	0x0b, r25	; 11
   	LCD_DPRT = val;       	//send cmnd to data port
  9a:	8b b9       	out	0x0b, r24	; 11
   	LCD_CPRT |= (1<<LCD_EN);      	//EN = 1 for H-to-L pulse
  9c:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	85 e0       	ldi	r24, 0x05	; 5
  a0:	8a 95       	dec	r24
  a2:	f1 f7       	brne	.-4      	; 0xa0 <lcd_putValue+0xa>
  a4:	00 00       	nop
   	_delay_us(1);                 	//wait to make enable wide
   	LCD_CPRT &= ~ (1<<LCD_EN); //EN = 0 for H-to-L pulse
  a6:	29 98       	cbi	0x05, 1	; 5
  a8:	8f e8       	ldi	r24, 0x8F	; 143
  aa:	91 e0       	ldi	r25, 0x01	; 1
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <lcd_putValue+0x16>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <lcd_putValue+0x1c>
  b2:	00 00       	nop
  b4:	08 95       	ret

000000b6 <lcdCommand>:
  	
}
 
//*******************************************************
void lcdCommand( unsigned char cmnd ){  
   	LCD_CPRT &= ~ (1<<LCD_RS);    	//RS = 0 for command
  b6:	28 98       	cbi	0x05, 0	; 5
   	lcd_putValue(cmnd);
  b8:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_putValue>
  bc:	08 95       	ret

000000be <lcdData>:
}
 
//*******************************************************
void lcdData( unsigned char data )
{
   	LCD_CPRT |= (1<<LCD_RS);      	//RS = 1 for data   
  be:	28 9a       	sbi	0x05, 0	; 5
   	lcd_putValue(data); 
  c0:	0e 94 4b 00 	call	0x96	; 0x96 <lcd_putValue>
  c4:	08 95       	ret

000000c6 <lcd_clear>:
}
 
void lcd_clear()
{
   	lcdCommand(0x01);	
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcdCommand>
  cc:	8f e8       	ldi	r24, 0x8F	; 143
  ce:	9a e1       	ldi	r25, 0x1A	; 26
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <lcd_clear+0xa>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <lcd_clear+0x10>
  d6:	00 00       	nop
  d8:	08 95       	ret

000000da <lcd_showCursor>:
   	_delay_us(1700);
}
 
void lcd_showCursor()
{
   	lcdCommand(0x0E);
  da:	8e e0       	ldi	r24, 0x0E	; 14
  dc:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcdCommand>
  e0:	87 ec       	ldi	r24, 0xC7	; 199
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <lcd_showCursor+0xa>
  e8:	00 c0       	rjmp	.+0      	; 0xea <lcd_showCursor+0x10>
  ea:	00 00       	nop
  ec:	08 95       	ret

000000ee <lcd_hideCursor>:
   	_delay_us(50);
}
 
void lcd_hideCursor()
{
   	lcdCommand(0x0C);
  ee:	8c e0       	ldi	r24, 0x0C	; 12
  f0:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcdCommand>
  f4:	87 ec       	ldi	r24, 0xC7	; 199
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <lcd_hideCursor+0xa>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <lcd_hideCursor+0x10>
  fe:	00 00       	nop
 100:	08 95       	ret

00000102 <lcd_init>:
}
 
//*******************************************************
void lcd_init()
{
   	LCD_DDDR |= 0xFF;
 102:	8a b1       	in	r24, 0x0a	; 10
 104:	8f ef       	ldi	r24, 0xFF	; 255
 106:	8a b9       	out	0x0a, r24	; 10
   	LCD_CDDR |= (1<<LCD_RS)|(1<<LCD_EN);
 108:	84 b1       	in	r24, 0x04	; 4
 10a:	83 60       	ori	r24, 0x03	; 3
 10c:	84 b9       	out	0x04, r24	; 4
 
   	LCD_CPRT &=~(1<<LCD_EN);   //LCD_EN = 0
 10e:	29 98       	cbi	0x05, 1	; 5
 110:	8f e3       	ldi	r24, 0x3F	; 63
 112:	9f e1       	ldi	r25, 0x1F	; 31
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <lcd_init+0x12>
 118:	00 c0       	rjmp	.+0      	; 0x11a <lcd_init+0x18>
 11a:	00 00       	nop
   	_delay_us(2000); 	//wait for init.
 
   	lcdCommand(0x38);	
 11c:	88 e3       	ldi	r24, 0x38	; 56
 11e:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcdCommand>
   	lcdCommand(0x0e);	//display on, cursor on
 122:	8e e0       	ldi	r24, 0x0E	; 14
 124:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcdCommand>
	lcdCommand(0x01);
 128:	81 e0       	ldi	r24, 0x01	; 1
 12a:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcdCommand>
   	lcdCommand(0x06);	//shift cursor right
 12e:	86 e0       	ldi	r24, 0x06	; 6
 130:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcdCommand>
 
   	lcd_clear();     	
 134:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_clear>
 138:	08 95       	ret

0000013a <lcd_gotoxy>:
}
 
//*******************************************************
void lcd_gotoxy(unsigned char x, unsigned char y)
{ 
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
 13e:	00 d0       	rcall	.+0      	; 0x140 <lcd_gotoxy+0x6>
 140:	00 d0       	rcall	.+0      	; 0x142 <lcd_gotoxy+0x8>
 142:	cd b7       	in	r28, 0x3d	; 61
 144:	de b7       	in	r29, 0x3e	; 62
   	unsigned char firstCharAdr[]={0x80,0xC0,0x94,0xD4};//Table 12-4 
 146:	90 e8       	ldi	r25, 0x80	; 128
 148:	99 83       	std	Y+1, r25	; 0x01
 14a:	90 ec       	ldi	r25, 0xC0	; 192
 14c:	9a 83       	std	Y+2, r25	; 0x02
 14e:	94 e9       	ldi	r25, 0x94	; 148
 150:	9b 83       	std	Y+3, r25	; 0x03
 152:	94 ed       	ldi	r25, 0xD4	; 212
 154:	9c 83       	std	Y+4, r25	; 0x04
   	lcdCommand(firstCharAdr[y-1] + x - 1);
 156:	fe 01       	movw	r30, r28
 158:	e6 0f       	add	r30, r22
 15a:	f1 1d       	adc	r31, r1
 15c:	81 50       	subi	r24, 0x01	; 1
 15e:	90 81       	ld	r25, Z
 160:	89 0f       	add	r24, r25
 162:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcdCommand>
 166:	8f e8       	ldi	r24, 0x8F	; 143
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <lcd_gotoxy+0x30>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <lcd_gotoxy+0x36>
 170:	00 00       	nop
   	_delay_us(100);  	
}
 172:	0f 90       	pop	r0
 174:	0f 90       	pop	r0
 176:	0f 90       	pop	r0
 178:	0f 90       	pop	r0
 17a:	df 91       	pop	r29
 17c:	cf 91       	pop	r28
 17e:	08 95       	ret

00000180 <lcd_print>:
 
//*******************************************************
void lcd_print( const char * str )
{
 180:	0f 93       	push	r16
 182:	1f 93       	push	r17
 184:	cf 93       	push	r28
 186:	fc 01       	movw	r30, r24
   	unsigned char i = 0;
 
   	while(str[i] != 0) //while it is not end of string
 188:	80 81       	ld	r24, Z
 18a:	88 23       	and	r24, r24
 18c:	59 f0       	breq	.+22     	; 0x1a4 <lcd_print+0x24>
 18e:	8f 01       	movw	r16, r30
 190:	c0 e0       	ldi	r28, 0x00	; 0
   	{
          	lcdData(str[i]);
 192:	0e 94 5f 00 	call	0xbe	; 0xbe <lcdData>
          	i++ ;
 196:	cf 5f       	subi	r28, 0xFF	; 255
//*******************************************************
void lcd_print( const char * str )
{
   	unsigned char i = 0;
 
   	while(str[i] != 0) //while it is not end of string
 198:	f8 01       	movw	r30, r16
 19a:	ec 0f       	add	r30, r28
 19c:	f1 1d       	adc	r31, r1
 19e:	80 81       	ld	r24, Z
 1a0:	81 11       	cpse	r24, r1
 1a2:	f7 cf       	rjmp	.-18     	; 0x192 <lcd_print+0x12>
   	{
          	lcdData(str[i]);
          	i++ ;
   	}
}
 1a4:	cf 91       	pop	r28
 1a6:	1f 91       	pop	r17
 1a8:	0f 91       	pop	r16
 1aa:	08 95       	ret

000001ac <main>:
 
//*******************************************************
int main(void)
{  	
   	lcd_init();
 1ac:	0e 94 81 00 	call	0x102	; 0x102 <lcd_init>
   	lcd_hideCursor();
 1b0:	0e 94 77 00 	call	0xee	; 0xee <lcd_hideCursor>
   	
   	while(1)
   	{  	
          	lcd_clear();
 1b4:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_clear>
          	lcd_gotoxy(1,1);
 1b8:	61 e0       	ldi	r22, 0x01	; 1
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_gotoxy>
          	lcd_print("The world is but");
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_print>
          	lcd_gotoxy(1,2);
 1c8:	62 e0       	ldi	r22, 0x02	; 2
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_gotoxy>
          	lcd_print("one country");
 1d0:	81 e1       	ldi	r24, 0x11	; 17
 1d2:	91 e0       	ldi	r25, 0x01	; 1
 1d4:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_print>
 
          	lcd_showCursor();
 1d8:	0e 94 6d 00 	call	0xda	; 0xda <lcd_showCursor>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1dc:	2f ef       	ldi	r18, 0xFF	; 255
 1de:	81 e1       	ldi	r24, 0x11	; 17
 1e0:	9a e7       	ldi	r25, 0x7A	; 122
 1e2:	21 50       	subi	r18, 0x01	; 1
 1e4:	80 40       	sbci	r24, 0x00	; 0
 1e6:	90 40       	sbci	r25, 0x00	; 0
 1e8:	e1 f7       	brne	.-8      	; 0x1e2 <main+0x36>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <main+0x40>
 1ec:	00 00       	nop
          	_delay_ms(2500);
   	
          	lcd_clear();
 1ee:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_clear>
   	
          	lcd_gotoxy(1,1);
 1f2:	61 e0       	ldi	r22, 0x01	; 1
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_gotoxy>
          	lcd_print("and mankind its");
 1fa:	8d e1       	ldi	r24, 0x1D	; 29
 1fc:	91 e0       	ldi	r25, 0x01	; 1
 1fe:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_print>
          	lcd_gotoxy(1,2);
 202:	62 e0       	ldi	r22, 0x02	; 2
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	0e 94 9d 00 	call	0x13a	; 0x13a <lcd_gotoxy>
          	lcd_print("citizens.");	
 20a:	8d e2       	ldi	r24, 0x2D	; 45
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	0e 94 c0 00 	call	0x180	; 0x180 <lcd_print>
 212:	2f ef       	ldi	r18, 0xFF	; 255
 214:	85 ee       	ldi	r24, 0xE5	; 229
 216:	9a ea       	ldi	r25, 0xAA	; 170
 218:	21 50       	subi	r18, 0x01	; 1
 21a:	80 40       	sbci	r24, 0x00	; 0
 21c:	90 40       	sbci	r25, 0x00	; 0
 21e:	e1 f7       	brne	.-8      	; 0x218 <main+0x6c>
 220:	00 c0       	rjmp	.+0      	; 0x222 <main+0x76>
 222:	00 00       	nop
 224:	c7 cf       	rjmp	.-114    	; 0x1b4 <main+0x8>

00000226 <_exit>:
 226:	f8 94       	cli

00000228 <__stop_program>:
 228:	ff cf       	rjmp	.-2      	; 0x228 <__stop_program>
