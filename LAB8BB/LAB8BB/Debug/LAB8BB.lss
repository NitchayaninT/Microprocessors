
LAB8BB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001be  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007e2  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006da  00000000  00000000  00000a3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000356  00000000  00000000  00001114  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000146c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e5  00000000  00000000  000014a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001ea  00000000  00000000  00001885  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001a6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 a1 00 	call	0x142	; 0x142 <main>
  78:	0c 94 b3 00 	jmp	0x166	; 0x166 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <keypadScan>:
}

void keypadScan(){
	
	// Store value for column
	uint8_t keyPressCodeC = keypadPortValue & 0x0F;
  80:	93 b1       	in	r25, 0x03	; 3
	
	keypadDirectionRegister ^= (1<<0) | (1<<1) | (1<<2) | (1<<3) | (1<<4) | (1<<5) | (1<<6) | (1<<7);
  82:	84 b1       	in	r24, 0x04	; 4
  84:	80 95       	com	r24
  86:	84 b9       	out	0x04, r24	; 4
	keypadPortControl ^= (1<<0) | (1<<1) | (1<<2) | (1<<3) | (1<<4) | (1<<5) | (1<<6) | (1<<7);
  88:	85 b1       	in	r24, 0x05	; 5
  8a:	80 95       	com	r24
  8c:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	ef e1       	ldi	r30, 0x1F	; 31
  90:	fe e4       	ldi	r31, 0x4E	; 78
  92:	31 97       	sbiw	r30, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <keypadScan+0x12>
  96:	00 c0       	rjmp	.+0      	; 0x98 <keypadScan+0x18>
  98:	00 00       	nop
	
	_delay_ms(5);
	
	// Store value for row
	uint8_t keyPressCodeR = keypadPortValue & 0xF0;
  9a:	83 b1       	in	r24, 0x03	; 3
	
	// Add value for column and row
	uint8_t keyPressCode = keyPressCodeC | keyPressCodeR;
  9c:	9f 70       	andi	r25, 0x0F	; 15
  9e:	80 7f       	andi	r24, 0xF0	; 240
  a0:	89 2b       	or	r24, r25
	uint8_t blinkDuration = 0;
	uint8_t value;
	// Comparison and resultant action
	
	// Column one
	if(keyPressCode == 0b11101110){
  a2:	8e 3e       	cpi	r24, 0xEE	; 238
  a4:	19 f4       	brne	.+6      	; 0xac <keypadScan+0x2c>
		value = digitCodeMap[1];
		ctrl = value;
  a6:	96 e0       	ldi	r25, 0x06	; 6
  a8:	9b b9       	out	0x0b, r25	; 11
  aa:	0a c0       	rjmp	.+20     	; 0xc0 <keypadScan+0x40>
	}
	if(keyPressCode == 0b11011110){
  ac:	8e 3d       	cpi	r24, 0xDE	; 222
  ae:	19 f4       	brne	.+6      	; 0xb6 <keypadScan+0x36>
		value = digitCodeMap[4];
		ctrl = value;
  b0:	96 e6       	ldi	r25, 0x66	; 102
  b2:	9b b9       	out	0x0b, r25	; 11
  b4:	0a c0       	rjmp	.+20     	; 0xca <keypadScan+0x4a>
	}
	if(keyPressCode == 0b10111110){
  b6:	8e 3b       	cpi	r24, 0xBE	; 190
  b8:	19 f4       	brne	.+6      	; 0xc0 <keypadScan+0x40>
		value = digitCodeMap[7];
		ctrl = value;
  ba:	97 e0       	ldi	r25, 0x07	; 7
  bc:	9b b9       	out	0x0b, r25	; 11
  be:	0a c0       	rjmp	.+20     	; 0xd4 <keypadScan+0x54>
	}
	if(keyPressCode == 0b01111110){
  c0:	8e 37       	cpi	r24, 0x7E	; 126
  c2:	19 f4       	brne	.+6      	; 0xca <keypadScan+0x4a>
		value = digitCodeMap[14];
		ctrl = value;
  c4:	99 e7       	ldi	r25, 0x79	; 121
  c6:	9b b9       	out	0x0b, r25	; 11
  c8:	0a c0       	rjmp	.+20     	; 0xde <keypadScan+0x5e>
	}
	
	// Column two
	if(keyPressCode == 0b11101101){
  ca:	8d 3e       	cpi	r24, 0xED	; 237
  cc:	19 f4       	brne	.+6      	; 0xd4 <keypadScan+0x54>
		value = digitCodeMap[2];
		ctrl = value;
  ce:	9b e5       	ldi	r25, 0x5B	; 91
  d0:	9b b9       	out	0x0b, r25	; 11
  d2:	0a c0       	rjmp	.+20     	; 0xe8 <keypadScan+0x68>
	}
	if(keyPressCode == 0b11011101){
  d4:	8d 3d       	cpi	r24, 0xDD	; 221
  d6:	19 f4       	brne	.+6      	; 0xde <keypadScan+0x5e>
		value = digitCodeMap[5];
		ctrl = value;
  d8:	9d e6       	ldi	r25, 0x6D	; 109
  da:	9b b9       	out	0x0b, r25	; 11
  dc:	0a c0       	rjmp	.+20     	; 0xf2 <keypadScan+0x72>
	}
	if(keyPressCode == 0b10111101){
  de:	8d 3b       	cpi	r24, 0xBD	; 189
  e0:	19 f4       	brne	.+6      	; 0xe8 <keypadScan+0x68>
		value = digitCodeMap[8];
		ctrl = value;
  e2:	9f e7       	ldi	r25, 0x7F	; 127
  e4:	9b b9       	out	0x0b, r25	; 11
  e6:	0a c0       	rjmp	.+20     	; 0xfc <keypadScan+0x7c>
	}
	if(keyPressCode == 0b01111101){
  e8:	8d 37       	cpi	r24, 0x7D	; 125
  ea:	19 f4       	brne	.+6      	; 0xf2 <keypadScan+0x72>
		value = digitCodeMap[0];
		ctrl = value;
  ec:	9f e3       	ldi	r25, 0x3F	; 63
  ee:	9b b9       	out	0x0b, r25	; 11
  f0:	0a c0       	rjmp	.+20     	; 0x106 <keypadScan+0x86>
	}
	
	// Column three
	if(keyPressCode == 0b11101011){
  f2:	8b 3e       	cpi	r24, 0xEB	; 235
  f4:	19 f4       	brne	.+6      	; 0xfc <keypadScan+0x7c>
		value = digitCodeMap[3];
		ctrl = value;
  f6:	9f e4       	ldi	r25, 0x4F	; 79
  f8:	9b b9       	out	0x0b, r25	; 11
  fa:	0a c0       	rjmp	.+20     	; 0x110 <keypadScan+0x90>
	}
	if(keyPressCode == 0b11011011){
  fc:	8b 3d       	cpi	r24, 0xDB	; 219
  fe:	19 f4       	brne	.+6      	; 0x106 <keypadScan+0x86>
		value = digitCodeMap[6];
		ctrl = value;
 100:	9d e7       	ldi	r25, 0x7D	; 125
 102:	9b b9       	out	0x0b, r25	; 11
 104:	0a c0       	rjmp	.+20     	; 0x11a <keypadScan+0x9a>
	}
	if(keyPressCode == 0b10111011){
 106:	8b 3b       	cpi	r24, 0xBB	; 187
 108:	19 f4       	brne	.+6      	; 0x110 <keypadScan+0x90>
		value = digitCodeMap[9];
		ctrl = value;
 10a:	9f e6       	ldi	r25, 0x6F	; 111
 10c:	9b b9       	out	0x0b, r25	; 11
 10e:	0a c0       	rjmp	.+20     	; 0x124 <keypadScan+0xa4>
	}
	if(keyPressCode == 0b01111011){
 110:	8b 37       	cpi	r24, 0x7B	; 123
 112:	19 f4       	brne	.+6      	; 0x11a <keypadScan+0x9a>
		value = digitCodeMap[15];
		ctrl = value;
 114:	91 e7       	ldi	r25, 0x71	; 113
 116:	9b b9       	out	0x0b, r25	; 11
 118:	0a c0       	rjmp	.+20     	; 0x12e <keypadScan+0xae>
	}
	
	// Column four
	if(keyPressCode == 0b11100111){
 11a:	87 3e       	cpi	r24, 0xE7	; 231
 11c:	19 f4       	brne	.+6      	; 0x124 <keypadScan+0xa4>
		value = digitCodeMap[10];
		ctrl = value;
 11e:	97 e7       	ldi	r25, 0x77	; 119
 120:	9b b9       	out	0x0b, r25	; 11
 122:	0a c0       	rjmp	.+20     	; 0x138 <keypadScan+0xb8>
	}
	if(keyPressCode == 0b11010111){
 124:	87 3d       	cpi	r24, 0xD7	; 215
 126:	19 f4       	brne	.+6      	; 0x12e <keypadScan+0xae>
		value = digitCodeMap[11];
		ctrl = value;
 128:	8c e7       	ldi	r24, 0x7C	; 124
 12a:	8b b9       	out	0x0b, r24	; 11
 12c:	08 95       	ret
	}
	if(keyPressCode == 0b10110111){
 12e:	87 3b       	cpi	r24, 0xB7	; 183
 130:	19 f4       	brne	.+6      	; 0x138 <keypadScan+0xb8>
		value = digitCodeMap[12];
		ctrl = value;
 132:	89 e3       	ldi	r24, 0x39	; 57
 134:	8b b9       	out	0x0b, r24	; 11
 136:	08 95       	ret
	}
	if(keyPressCode == 0b01110111){
 138:	87 37       	cpi	r24, 0x77	; 119
 13a:	11 f4       	brne	.+4      	; 0x140 <keypadScan+0xc0>
		value = digitCodeMap[13];
		ctrl = value;
 13c:	8e e5       	ldi	r24, 0x5E	; 94
 13e:	8b b9       	out	0x0b, r24	; 11
 140:	08 95       	ret

00000142 <main>:
void keypadScan(void);

static const uint8_t digitCodeMap[];

int main() {
	DDRD = 0xFF; // Setting DDRD to output // setting for port D
 142:	8f ef       	ldi	r24, 0xFF	; 255
 144:	8a b9       	out	0x0a, r24	; 10
 146:	2f ef       	ldi	r18, 0xFF	; 255
 148:	86 e7       	ldi	r24, 0x76	; 118
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	21 50       	subi	r18, 0x01	; 1
 14e:	80 40       	sbci	r24, 0x00	; 0
 150:	90 40       	sbci	r25, 0x00	; 0
 152:	e1 f7       	brne	.-8      	; 0x14c <main+0xa>
 154:	00 c0       	rjmp	.+0      	; 0x156 <main+0x14>
 156:	00 00       	nop

	_delay_ms(30);

	// Keypad initialization
	keypadDirectionRegister = 0xF0;
 158:	80 ef       	ldi	r24, 0xF0	; 240
 15a:	84 b9       	out	0x04, r24	; 4
	keypadPortControl = 0x0F;
 15c:	8f e0       	ldi	r24, 0x0F	; 15
 15e:	85 b9       	out	0x05, r24	; 5

	
	//upper nibble of port B is rows(output), lower is for columns(input)
	
	while (1) {
		keypadScan();
 160:	0e 94 40 00 	call	0x80	; 0x80 <keypadScan>
 164:	fd cf       	rjmp	.-6      	; 0x160 <main+0x1e>

00000166 <_exit>:
 166:	f8 94       	cli

00000168 <__stop_program>:
 168:	ff cf       	rjmp	.-2      	; 0x168 <__stop_program>
